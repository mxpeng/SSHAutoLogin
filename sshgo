#!/bin/bash

#密钥
KEY=xxxxxx

#配置文件文件路径
CONFIG_DIR=/usr/local/etc/sshgo/config


#默认服务器配置项
#    "分组 服务器名称 IP地址 端口号 登录用户名 登录密码/秘钥文件Key 秘钥文件地址"
CONFIGS=(
)

#服务器配置数
CONFIG_LENGTH=0

function RefreshConfig() {
    CONFIGS=(
    )

    #读取config文件夹中的配置文件
    for file in $CONFIG_DIR/*
    do
        if test -f $file 
        then
            decrypt_str=$(openssl enc -aes-256-cbc -d -a -pass pass:$KEY -in $file)
            CONFIGS+=("$decrypt_str")
        fi
    done 

    #服务器配置数
    CONFIG_LENGTH=${#CONFIGS[*]}
}

#服务器配置菜单
function ConfigList(){

    for ((i=0;i<${CONFIG_LENGTH};i++));
    do
        #将一维sites字符串赋值到数组
        CONFIG=(${CONFIGS[$i]}) 

        serverNum=$(($i+1))
        if [ $serverNum -lt 10 ];then
            serverNum="0$serverNum"
        fi

        serverGroup=${CONFIG[0]}
        serverName=${CONFIG[1]}
        serverIp=${CONFIG[2]}
        serverPort=${CONFIG[3]}
        serverUser=${CONFIG[4]}

       
        for ((j=`echo $serverGroup | wc -L`;j<8;j++));do 
            serverGroup="$serverGroup "
        done
        
        for ((j=`echo $serverName | wc -L`;j<20;j++));do 
            serverName="$serverName "
        done

        for ((j=`echo $serverIp | wc -L`;j<20;j++));do 
            serverIp="$serverIp "
        done

        for ((j=`echo $serverPort | wc -L`;j<10;j++));do 
            serverPort="$serverPort "
        done

        for ((j=`echo $serverUser | wc -L`;j<15;j++));do 
            serverUser="$serverUser "
        done
        
        echo "${serverNum} | $serverGroup | ${serverNum} | $serverName $serverIp $serverPort $serverUser"
    done
}

#刷新菜单
function RefreshMenu() {
    clear 

    RefreshConfig

    LoginMenu
}

#登录菜单
function LoginMenu(){

    echo -ne "\033]0; 【sshgo】  \007"

    if [  ! -n $1 ]; then
        AutoLogin $1
    else
        echo ""
        echo "   `hostname`, 欢迎使用sshgo"
        echo ""
        echo "1) 输入服务器 id 直接登录"
        echo "2）输入 add 按照提升增加服务器"
        echo "3）输入 delete [id] 删除服务器"
        echo "----------------------------------------------------------------------"
        echo ""
        ConfigList
        echo ""
        echo "请输入操作命令和要操作的服务器序号:"
        echo "----------------------------------------------------------------------"
        echo ""
    fi
}

#选择登录的服务器
function ChooseServer(){
    read commandStr

    echo ""

    # 如果 commandStr 匹配  [0-9]+
    if [[ "$commandStr" =~ [0-9]+ ]];then
        commandStr="login $commandStr"
    fi

    #将一维sites字符串赋值到数组
    commandArray=($commandStr)

    serverCommand=${commandArray[0]}
    serverNum=${commandArray[1]}

    case "$serverCommand" in
		login | l )
            VerifyChooseServerNum $serverNum
            AutoLogin $serverNum
            return 
		;;
		add)
            AddConfig
            RefreshMenu
            ChooseServer
            return 
		;;
		delete)
            VerifyChooseServerNum $serverNum
            DeleteConfig  $serverNum
            RefreshMenu
            ChooseServer
            return 
		;;
		*) 
            echo "输入的命令不正确，请重新输入:"
            echo ""
            ChooseServer
            return 
        ;;
	esac    
}

#校验输入序号是否正确
function VerifyChooseServerNum(){
    serverNum=$1

    if [[ $serverNum -gt $CONFIG_LENGTH ]] ;
    then
        echo "输入的序号不正确，请重新输入:"
        echo ""
        ChooseServer ;
        return ;
    fi
    if [[ $serverNum -lt 1 ]] ;
    then
        echo "输入的序号不正确，请重新输入:"
        echo ""
        ChooseServer ;
        return ;
    fi
}

#新增配置
function AddConfig(){

    echo "请按照如下格式输入"
    echo "分组 服务器名称 IP地址 端口号 登录用户名 登录密码/秘钥文件Key 秘钥文件地址"
    echo ""

    read serverConfigStr

    #将一维sites字符串赋值到数组
    serverConfigArray=($serverConfigStr)

    serverConfigFileName=${serverConfigArray[0]}_$(echo -n ${serverConfigStr} | openssl md5)

    if [ ! -x $CONFIG_DIR ]; then 
        mkdir -p $CONFIG_DIR
    fi

    serverConfigFilePath=${CONFIG_DIR}/${serverConfigFileName}

    echo "${serverConfigStr}" | openssl enc -aes-256-cbc -e -a -pass pass:${KEY} -out ${serverConfigFilePath}

}

#删除配置
function DeleteConfig(){
    echo "是否确认操作(yes/no)"
    echo ""
    read deleteFlag

    if [ $deleteFlag == "yes" ];
    then
        num=$(($1-1))

        serverConfigStr=${CONFIGS[$num]}
        serverConfigArray=($serverConfigStr)

        serverConfigFileName=${serverConfigArray[0]}_$(echo -n ${serverConfigStr} | openssl md5)

        serverConfigFilePath=${CONFIG_DIR}/${serverConfigFileName}

        rm -rf ${serverConfigFilePath}

    elif [ $deleteFlag == "no" ];
    then
        return ;
    else
        DeleteConfig $1 ;
        return ;
    fi
}

#自动登录
#分组 服务器名称 IP地址 端口号 登录用户名 登录密码/秘钥文件Key 秘钥文件地址
function AutoLogin(){

    num=$(($1-1))
    CONFIG=(${CONFIGS[$num]})
    
    echo "正在登录【${CONFIG[0]} | ${CONFIG[1]}】"
    echo ""

    echo -ne "\033]0; 【${CONFIG[0]} | ${CONFIG[1]}】  \007"

	command="
        expect {
                \"yes/no\" {send \"yes\n\"; exp_continue;}
                \"*assword\" {set timeout 6000; send \"${CONFIG[5]}\n\";}
                \"*passphrase\" {set timeout 6000; send \"${CONFIG[5]}\r\n\";}
                \"Last*\" {  send_user \"\n成功登录【${CONFIG[0]} | ${CONFIG[1]}】\n\";}
        }
       interact
    ";
   pem=${CONFIG[6]}
   if [ -n "$pem" ]
   then
	expect -c "
		spawn ssh -p ${CONFIG[3]} -i ${CONFIG[6]} ${CONFIG[4]}@${CONFIG[2]}
		${command}
	"
   else
	expect -c "
		spawn ssh -p ${CONFIG[3]} ${CONFIG[4]}@${CONFIG[2]}
		${command}
	"
   fi
    echo "您已退出【${CONFIG[0]} | ${CONFIG[1]}】"

}

# 程序入口
clear
if [ 1 == $# ]; then
    if [ 'list' == $1 ]; then
        RefreshConfig
        ConfigList
    else
        RefreshConfig
        AutoLogin $1
    fi
else
    RefreshConfig
    LoginMenu 
    ChooseServer 
fi